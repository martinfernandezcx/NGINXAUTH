{
	"info": {
		"_postman_id": "766c1c64-ffa7-4045-8fed-74b80bf4d3cb",
		"name": "JWT Nginx Auth Tests",
		"description": "Test suite for JWT authentication with Nginx proxy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44967899",
		"_collection_link": "https://noone0-2254.postman.co/workspace/nginxauth~32647e80-120a-4cff-9129-9ca7cd2d3fab/collection/44967899-766c1c64-ffa7-4045-8fed-74b80bf4d3cb?action=share&source=collection_link&creator=44967899"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    pm.expect(jsonData.token.split('.')).to.have.lengthOf(3);",
									"});",
									"",
									"// Store token for other requests",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"auth_token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Public Endpoints",
			"item": [
				{
					"name": "Public Route - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is public data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Public route: No auth needed');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/public/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"public",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Protected Endpoints",
			"item": [
				{
					"name": "Protected Route - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message about missing token\", function () {",
									"    pm.expect(pm.response.text()).to.include('Missing Authorization header');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/protected/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"protected"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protected Route - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message about invalid token\", function () {",
									"    pm.expect(pm.response.text()).to.include('Invalid token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.token.here",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/protected/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"protected"
							]
						}
					},
					"response": []
				},
				{
					"name": "Protected Route - Valid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains protected data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Protected');",
									"});",
									"",
									"pm.test(\"User ID is present in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('userId');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/protected/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"protected",
								"protected"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}